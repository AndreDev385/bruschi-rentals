---
interface CarouselItem {
	image: string;
	title: string;
}

interface Props {
	items: CarouselItem[];
}

const { items } = Astro.props;
---

<div class="relative carousel-container overflow-hidden rounded-xl">
  <div class="carousel-track flex transition-transform duration-500 ease-out">
    {items.map((item, index) => (
      <div class="carousel-slide min-w-full">
        <div class="relative h-[500px]">
          <img 
            src={item.image || "/placeholder.svg"} 
            alt={item.title} 
            class="w-full h-full object-cover"
          />
          <div class="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent flex items-end">
            <div class="p-8">
              <h3 class="text-2xl font-bold text-white">{item.title}</h3>
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>
  
  <button class="carousel-button prev absolute top-1/2 left-4 transform -translate-y-1/2 bg-white/80 hover:bg-white text-gray-900 rounded-full p-2 shadow-md z-10">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
    </svg>
  </button>
  
  <button class="carousel-button next absolute top-1/2 right-4 transform -translate-y-1/2 bg-white/80 hover:bg-white text-gray-900 rounded-full p-2 shadow-md z-10">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
    </svg>
  </button>
  
  <div class="carousel-dots absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2 z-10">
    {items.map((_, index) => (
      <button 
        class="carousel-dot w-3 h-3 rounded-full bg-white/50 hover:bg-white/80 transition-colors" 
        data-index={index}
      ></button>
    ))}
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    const track = document.querySelector('.carousel-track');
    const slides = document.querySelectorAll('.carousel-slide');
    const prevButton = document.querySelector('.carousel-button.prev');
    const nextButton = document.querySelector('.carousel-button.next');
    const dots = document.querySelectorAll('.carousel-dot');
    
    let currentIndex = 0;
    const slideCount = slides.length;
    
    // Set the first dot as active
    if (dots.length > 0) {
      dots[0].classList.add('bg-white');
    }
    
    function goToSlide(index) {
      if (index < 0) {
        index = slideCount - 1;
      } else if (index >= slideCount) {
        index = 0;
      }
      
      currentIndex = index;
      
      if (track) {
        track.style.transform = `translateX(-${currentIndex * 100}%)`;
      }
      
      // Update dots
      dots.forEach((dot, i) => {
        if (i === currentIndex) {
          dot.classList.add('bg-white');
          dot.classList.remove('bg-white/50');
        } else {
          dot.classList.remove('bg-white');
          dot.classList.add('bg-white/50');
        }
      });
    }
    
    // Event listeners
    prevButton?.addEventListener('click', () => {
      goToSlide(currentIndex - 1);
    });
    
    nextButton?.addEventListener('click', () => {
      goToSlide(currentIndex + 1);
    });
    
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        goToSlide(index);
      });
    });
    
    // Auto-advance slides every 5 seconds
    let interval = setInterval(() => {
      goToSlide(currentIndex + 1);
    }, 5000);
    
    // Pause auto-advance on hover
    const container = document.querySelector('.carousel-container');
    container?.addEventListener('mouseenter', () => {
      clearInterval(interval);
    });
    
    container?.addEventListener('mouseleave', () => {
      interval = setInterval(() => {
        goToSlide(currentIndex + 1);
      }, 5000);
    });
  });
</script>
